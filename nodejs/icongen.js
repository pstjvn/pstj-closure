/**
 * @fileovervire Provides the icon compiler - it consumes a raw svg icon
 * file and produces the needed files to allow the icons to be consumed from
 * closure project.
 *
 * @author regardingscot@gmail.com (Peter StJ)
 */

require('../../../library/closure/goog/bootstrap/nodejs.js');

require(__dirname + '/../../../templates/deps.js');
require(__dirname + '/../deps.js');
require(__dirname + '/../demodeps.js');

goog.require('goog.Promise');
goog.require('goog.array');
goog.require('pstj.ds.autogen.IconParser');


var fs = require('fs');
var jsdom = require('jsdom').jsdom;
var serializeDoc = require('jsdom').serializeDocument;


const GEN_DIR = __dirname + '/../autogenerated/';
const TPL_DIR = __dirname + '/../templates/';
const ICON_NAMES_FILE = GEN_DIR + 'iconnames.js';
const TPL_FILE = TPL_DIR + 'icons.soy';


/**
 * @param {string} uri
 * @return {!goog.Promise<string>}
 */
function getFileContent(uri) {
  return new goog.Promise(function(resolve, reject) {
    fs.readFile(uri, {encoding: 'UTF-8'}, function(err, data) {
      if (err) {
        reject(err);
      } else {
        resolve(data);
      }
    });
  });
}


/**
 * Parses a string as an html document.
 * @param {string} html
 * @return {Document}
 */
function parseHtml(html) {
  return jsdom(html);
}


/**
 * Wraps a string of html to make it look like an html document.
 * @param {string} htmlstring
 * @return {string}
 */
function wrapAsHtml(htmlstring) {
  return '<!doctype html><html><head></head><body>' + htmlstring +
      '</body></html>';
}


/**
 * Application's main entry point.
 * @param {string} file The URI to a file to read.
 */
function main(file) {
  getFileContent(file).then(wrapAsHtml).then(parseHtml).then(function(doc) {
    var parser = new pstj.ds.autogen.IconParser(doc);
    var opts = { encoding: 'utf8' };
    parser.forEach((el) => {
      fs.writeFileSync(GEN_DIR + el.getRendererFileName() + '.js', el.text,
          opts);
    });
    fs.writeFileSync(ICON_NAMES_FILE, parser.generateIconNames(), opts);
    fs.writeFileSync(TPL_FILE, parser.generateIconTemplate(), opts);
  });
}

main(process.argv[2]);
