{namespace pstj.material.template}


/** Base template */
{template .CoreElement}
  {@param? content: string}
  <div is class="{css core-element}">{if $content}{$content}{/if}</div>
{/template}


/** Item template */
{template .Item}
  {@param? content: string}
  <div is class="{css core-item}">{if $content}{$content}{/if}</div>
{/template}


/** Template for the scrim panel */
{template .ScrimPanel}
  <div is class="{css scrim-panel} {css drawer-panel-main}">
    <div is class="{css core-element} {css core-tap} {css scrim}"></div>
  </div>
{/template}


/**
 * Template for the DrawerPanel component.
 */
{template .DrawerPanel}
  <div class="{css drawer-panel} {css core-swipe}">
    <div is class="{css scrim-panel} {css drawer-panel-main}">
      <div is class="{css core-element} {css core-tap} {css scrim}"></div>
    </div>
    <div is class="{css core-element} {css drawer-panel-drawer}"></div>
  </div>
{/template}

/** The main panel fo rthe header panel. */
{template .HeaderPanelMain}
  <div is class="{css material-header-panel-main}">
    <div class="{css material-header-panel-main-container}">
      <div class="{css material-header-panel-main-content}"></div>
    </div>
    <div class="{css material-drop-shadow}"></div>
  </div>
{/template}


/** The header in the header panel. */
{template .HeaderPanelHeader}
  <div is class="{css material-header-panel-header}"></div>
{/template}


/**
  * Template for the header panel material element
  * It intentionally does not contain the header and main panels as we want to
  * create them programatically with their own children from the JSON config.
  */
{template .HeaderPanel}
  <div class="{css material-header-panel}">
    <div class="{css material-header-panel-outer-container}">
    </div>
  </div>
{/template}


/**
 * Template for the base ripple
 */
{template .Ripple}
  {@param? circle: bool}
  {@param? recenter: bool}
  <div is class="{css ripple}
  {if $circle}
    {sp}{css ripple-circle}
  {/if}
  "
  {if $recenter}
    {sp} recenter
  {/if}
  >
    <div class="{css ripple-bg}"></div>
    <div class="{css ripple-waves}"></div>
  </div>
{/template}


/**
 * The floating label for the inputs.
 * @param label
 */
{template .FloatingLabel}
  <div class="{css floating-label}">
    <span class="{css floating-label-text}">{$label}</span>
  </div>
{/template}


/**
 * The underline effect for the inputs.
 */
{template .InputUnderline}
  <div class="{css material-input-underline}">
    <div class="{css material-input-underline-unfocused}"></div>
    <div class="{css material-input-underline-focused}"></div>
  </div>
{/template}


/**
 * The error message for the inputs
 * @param error The error to display.
 */
{template .InputError}
  <div class="{css material-input-error}">
    <div class="{css material-input-error-text}" role="alert">{$error}</div>
    <div is class="{css material-icon} {css material-input-error-icon}" icon="warning" size="20"></div>
  </div>
{/template}


/**
 * Provides the template for the default Input in material design. Note
 * that this is NOT the paper input
 */
{template .Input}
  <div class="{css material-input}"></div>
{/template}


/**
 * The template for the input body that overlays the actual input element.
 * @param label
 * @param type
 * @param value
 * @param name
 */
{template .InputBody}
  <div is class="{css material-input-body}">
    <div class="{css material-input-body-label}">
      <span class="{css material-input-body-label-text}">{$label}</span>
    </div>
    <div is class="{css core-element} {css material-input-body-cursor}"></div>
    <div class="{css material-input-body-container}">
      <input type="{$type}" value="{$value}" name="{$name}">
    </div>
  </div>
{/template}


/**
 * Provides the template for the RadioButton. Internally uses the ripple effect.
 */
{template .RadioButton}
  {@param? label: string}
  <div is class="{css material-radio-button}" role="radio" tabindex="0" aria-checked="false">
    <div class="{css material-radio-button-container}">
      <div class="{css material-radio-button-off}"></div>
      <div class="{css material-radio-button-on}"></div>
      {call .Ripple}
        {param circle: true /}
        {param recenter: true /}
      {/call}
    </div>
    {if $label}
      <div class="{css material-radio-button-label}" aria-hidden="true">{$label}</div>
    {/if}
  </div>
{/template}


/**
 * Provides the template for the toggle button
 */
{template .ToggleButton}
  <div is class="{css material-toggle-button}" role="button" aria-pressed="false" tabindex="0">
    <div class="{css material-toggle-button-container}">
      <div class="{css material-toggle-button-bar}"></div>
      {call .RadioButton}
        {param label: '' /}
      {/call}
    </div>
  </div>
{/template}


/** Template for the Radio Group */
{template .RadioGroup}
  <div is class="{css material-radio-group}"></div>
{/template}


/** Progress bar element */
{template .Progressbar}
  <div class="{css material-progress-bar}">
    <div class="{css material-progress-bar-inner}"></div>
  </div>
{/template}


/** Provides template for the shadow element. */
{template .Shadow}
  <div is class="{css material-shadow} {css material-shadow-0}">
    <div class="{css material-shadow-bottom}"></div>
    <div class="{css material-shadow-top}"></div>
  </div>
{/template}


/** Template for the internal button label. */
{template .ButtonContent}
  {@param? label: string}
  <div is class="{css core-element} {css relative}">
    <div class="{css material-button-label}">{$label}</div>
  </div>
{/template}


/**
 * Provides the template for the material button. Note that it does not
 * support icons etc, it is purely material impementation
 */
{template .Button}
  {@param? label: string}
  <div is class="{css material-button}">
    {call .Shadow /}
    {call .ButtonContent}
      {param label: $label /}
    {/call}
    {call .Ripple}
      {param recenter: false /}
    {/call}
  </div>
{/template}


/**
 * Provides the icon container.
 */
{template .IconContainer}
  <div class="{css material-icon-container}"></div>
{/template}


/**
 * Provides the SVG for the menu icon and its transformation, including:
 * plus, close, checked, menu, back arrow.
 */
{template .MenuIcon}
  <svg is viewBox="0 0 200 200" class="{css material-icon} {css fit}" type="none" preserveAspectRatio="xMidYMid meet" width="25px" height="25px">
    <path class="{css menu} {css first}" d="M168,59.75c0,4.28-3.47,7.75-7.75,7.75H39.75c-4.28,0-7.75-3.47-7.75-7.75l0,0c0-4.28,3.47-7.75,7.75-7.75h120.5C164.53,52,168,55.47,168,59.75L168,59.75z"/>
    <path class="{css menu} {css second}" d="M168,100.25c0,4.28-3.47,7.75-7.75,7.75H39.75c-4.28,0-7.75-3.47-7.75-7.75l0,0c0-4.28,3.47-7.75,7.75-7.75h120.5C164.53,92.5,168,95.97,168,100.25L168,100.25z"/>
    <path class="{css menu} {css third}" d="M168,140.25c0,4.28-3.47,7.75-7.75,7.75H39.75c-4.28,0-7.75-3.47-7.75-7.75l0,0c0-4.28,3.47-7.75,7.75-7.75h120.5C164.53,132.5,168,135.97,168,140.25L168,140.25z"/>
  </svg>
{/template}


/** Test SVG */
{template .UserIcon}
  <svg is viewBox="0 0 24 24" class="{css material-icon} {css fit}" type="none" preserveAspectRatio="xMidYMid meet" width="25px" height="25px">
    <path d="M12,2C6.5,2,2,6.5,2,12s4.5,10,10,10c5.5,0,10-4.5,10-10S17.5,2,12,2z M12,5c1.7,0,3,1.3,3,3c0,1.7-1.3,3-3,3c-1.7,0-3-1.3-3-3C9,6.3,10.3,5,12,5z M12,19.2c-2.5,0-4.7-1.3-6-3.2c0-2,4-3.1,6-3.1c2,0,6,1.1,6,3.1C16.7,17.9,14.5,19.2,12,19.2z"></path>
  </svg>
{/template}


/** Implements the FAB button */
{template .Fab}
  <div is class="{css material-fab}">
    {call .Shadow /}
    {call .IconContainer /}
    {call .Ripple}
      {param recenter: true /}
    {/call}
  </div>
{/template}


/** Template for the material checkbox */
{template .Checkbox}
  {@param label: string}
  <div class="{css material-checkbox}" role="checkbox">
    <div class="{css material-checkbox-container}">
      <div class="{css material-checkbox-icon}"></div>
      {call .Ripple}
        {param circle: true /}
        {param recenter: true /}
      {/call}
    </div>
    <div class="{css material-checkbox-label}">{$label}</div>
  </div>
{/template}


/** Menu item template. */
{template .MenuItem}
  {@param? content: string}
  <div is class="{css material-menu-item}">
    {call .IconContainer /}
    <div class="{css material-menu-item-content}">
      {call .Item}
        {param content: $content /}
      {/call}
    </div>
  </div>
{/template}
