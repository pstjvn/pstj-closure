{namespace pstj.sourcegen.template}


/** Doc */
{template .IntegerHelper kind="text"}
{@param namespace: string}
{literal}/**
 * Helper method for chekcing if the value is really an integer.
 *
 * @param {number} val
 * @return {number}
 */
{/literal}
{$namespace}{literal} = function(val) {
  if (goog.DEBUG) {
    if (parseInt(val, 10) != val) {
      throw new Error('The value is not an integer: ' + val);
    }
  }
  return val;
}{/literal}
{/template}


/** Templetized helper function */
{template .MinMaxHelper kind="text"}
{@param namespace: string}
{literal}/**
 * Helper function for managing min/max values of ints.
 *
 * @param {number} val
 * @param {?number} min
 * @param {?number} max
 * @return {number}
 */
{/literal}
{$namespace}{literal} = function(val, min, max) {
  if (goog.DEBUG) {
    if ((min != null && val < min) || (max != null && val > max)) {
      throw new Error(
          'Value out of range: ' + val + ', ' + min + ', ' + max);
    }
  }
  return val;
};
{/literal}
{/template}


/** Templetized warning message */
{template .Warning kind="text"}
{literal}// This code is auto generate, please do not edit!{/literal}
{/template}


/** Provides the template for the base rpc path. */
{template .RpcBaseUrl kind="text"}
{@param namespace: string}
{@param base: string}
{literal}/**
 * Provides the base path for the RPC URL.
 *
 * @private
 * @const {!string}
 */
{/literal}
{$namespace}.baseUrl_ = '{$base}';
{/template}
